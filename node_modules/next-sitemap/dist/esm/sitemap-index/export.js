var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable @typescript-eslint/no-unused-vars */
import { exportFile } from '../file';
import { generateSitemapIndexXml } from './generate';
/**
 * Export sitemap index file
 * @param runtimePaths
 * @param config
 * @returns
 */
export const exportSitemapIndex = (runtimePaths, config) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    // Remove first entry from additionalSitemaps (Index sitemap)
    const [indexEntry, ...restSitemaps] = (_b = (_a = config === null || config === void 0 ? void 0 : config.robotsTxtOptions) === null || _a === void 0 ? void 0 : _a.additionalSitemaps) !== null && _b !== void 0 ? _b : [];
    // Generate sitemap index content
    const content = generateSitemapIndexXml(restSitemaps);
    return exportFile(runtimePaths.SITEMAP_INDEX_FILE, content);
});
