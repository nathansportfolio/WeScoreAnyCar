var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { generateRobotsTxt } from '../generate';
import { exportFile } from '../../file';
/**
 * Export robots txt file
 * @param runtimePaths
 * @param config
 */
export const exportRobotsTxt = (runtimePaths, config) => __awaiter(void 0, void 0, void 0, function* () {
    // Generate robots text
    const robotsTxt = generateRobotsTxt(config);
    // Create file
    if (robotsTxt) {
        yield exportFile(runtimePaths.ROBOTS_TXT_FILE, robotsTxt);
    }
});
